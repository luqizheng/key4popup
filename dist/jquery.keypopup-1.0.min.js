/*! 
jquery.keypopup Copyright(c) 2011 Leo.lu  MIT Licensed
https://github.com/luqizheng/key4popup 
*/
(function($){
/// <reference path="../_pubMethod.js" />
/// <reference path="../_pubEvent.js" />
/// <reference path="../_layout.js" />
var defaultOpt = {
    onMatch: false, // match pop up condition
    onMiss: false, // missmatch ,
    onFocus: false, //for select start.
    onDefault: false, //use press to select the first one. it should  return default one.            
    matches: [{
        start: "@",
        end: " ",
        isMatch: function (e) {
            return e.which === 50 && e.shiftKey;
        }
    },
        {
            start: "#",
            end: "# ",
            isMatch: function (e) {
                return e.which === 51 && e.shiftKey;
            }
        }
    ],
    _state: 0 // 0 nothing , 1 onMatch.
}


$.fn.keypopup = function (opt) {

    var options = null,
        self = this[0]
        , $this = this;

    if (typeof opt == "string") {
        options = $this.data("_keypopup");
        var arg = [options].concat([].slice.call(arguments, 1));
        _pubMethod[opt].apply(self, arg)
    }
    else {
        options = $.extend({}, defaultOpt, opt)
        createLayout(options);
        _layout.reset.call(self, options);
        $this.data("_keypopup", options)
            .mouseup(innerHandler)
            .keydown(innerHandler)
            .keyup(innerHandler)
            .focus(function () { _layout.reset.call(this, options); });

        function innerHandler(e) {
            var info = _eventHandler[e.type].call(self, e, options)
            //console.log("event popup called " + info.e);
            info.invoke.call(self, options, info.matchInfo);
            if (info != undefined && !info.bubby) {
                //console.log("no bubby.")
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        }

    }

    function createLayout(options) {

        if (!options._target) {
            var $keypop = $("#jqkeypopup");
            if ($keypop.length == 0) {
                $keypop = $('<div id="jqkeypopup" style="position:absolute;width;z-index:-99999;overflow:hidden;visiblity:hidden;word-wrap: break-word;word-break:normal;"></div>')
                    .appendTo("body");
            }
            options._target = $keypop[0]
        }
    }


    return $this;
}



var _extendLib = {
    offset: function (ele) {
        return $(ele).offset();
    },
    setSizePos: function (ele, info) {
        $(ele).css(info);
    },
    height:function(ele){
        return $(ele).height();
    }

}

/// <reference path="./lib/lib.d.ts" />



var _cursorMgr = {
    //this必须是 textarea对象 
    getSelection: function () {
        var content, self = this;
        if (window.getSelection) {								
            //statnd browser;
            content = self.value.substring(0, self.selectionEnd);
        } else {

            var range = document.selection.createRange(),
                dup_range = range.duplicate();
            dup_range.moveToElementText(self);
            dup_range.setEndPoint('EndToEnd', range);
            content = dup_range.text;
        }
        return content;
    },
    setPos: function (newLength, scrollTop) {
        var self = this;
        self.focus();
        self.scrollTop = scrollTop
        if (window.getSelection) {
            self.selectionStart = self.selectionEnd = newLength;
        }
        else if (self.createTextRange) {
            var range = self.createTextRange()
                , action = 'character';
            range.collapse(true);
            range.moveEnd(action, newLength);
            range.moveStart(action, newLength);
        }
    }
}
/// <reference path="_matcher.js" />
//return miss, onMatch,onFouce
//miss, match,focus,
//matchInfo

var _eventHandler = {
    keyup: function (e, options) {
        console.log("keyup-" + e.which)
        var
            inputByIme = e.which == 229,  //microsoft ime return 229.;
            isCursorCtrlKey = e.which == 38 || e.which == 39 || e.which == 40 || e.which == 37 || e.which == 8,
            eventName = event_name_noop
            ;
        // up down left,right,BackSpace
                                        
        if (e.which == 27 || e.which == 32) {//ESC or space
            eventName = event_name_miss            
        }
        else {
            var matchInfo = (inputByIme || isCursorCtrlKey)
                ? _matcher.byCursor.call(this, options, inputByIme ? 0 : 1)
                : _matcher.always.call(this, options, e)
            if (matchInfo)
                eventName = event_name_match;
        }
        return _eventKey[eventName].create(matchInfo);
        //eventName = matchInfo ? "match" _eventKey.match.create(matchInfo) : _eventKey.noop.create();

    },
    keydown: function (e, options) {
        //console.log("keydown-" + e.which)
        var evnName = event_name_noop;
        if (options._state == 1) { //had execute onMatch, it should pop up the menu, but DONOT　fosuc on int.
            if (e.which == 40) { //press-down
                evnName = event_name_focus//focus the popup menu.
            }
            if (e.which == 13) { //input enter get the popup menut default value;
                evnName = event_name_default;
            }
        }
        return _eventKey[evnName].create();
    },
    mouseup: function (e, options) {
        _layout.reset.call(this, options);
        var info = _matcher.byCursor.call(this, options);
        return info ? _eventKey.match.create(info) : _eventKey.noop.create();
    }
}
/// <reference path="_cursorMgr.js" />
var _pubMethod = {
    /**
     * @param  {any} options
     * @param  {any} strName
     */
    set: function (options, strName) {

        var self = this
            , matchInfo = options.matchInfo
            , tagName = matchInfo.start + strName + matchInfo.end
            , layoutLength = matchInfo.content.substr(0, matchInfo.content.length - matchInfo.key.length).length
            , srcContent = self.value
            , start = srcContent.substr(0, layoutLength)
            , end = srcContent.substr(layoutLength + matchInfo.key.length)
            , result = start + tagName + end; //add space avoid popup panel again.
        //console.log(JSON.stringify($tag));
        self.value = result;
        options._state = 0;
        options.onMiss.call(self);
        _cursorMgr.setPos.call(self, layoutLength + tagName.length, matchInfo.scrollTop);
    },
    focus: function (options) {
        var matchInfo = options.matchInfo;
        _cursorMgr.setPos.call(this, options, matchInfo.content.length, matchInfo.scrollTop);
    },
    hide: function (options) {
        _eventKey.miss.create().invoke.call(this, options);
        //.miss.call(this,options);
    }

}

/// <reference path="_cursorMgr.js" />
var _matcher = { //all matcher fire by it;
    /**
     * fire by cursor in textarea
     * @param  {any} options
     * @param  {any} startLen include 1 charge after the matches[0].start.
     */
    byCursor: function (options, startLen) {
        //render the text which mouse focus to the layout behinde the textarea.
                                    
        var len = startLen === undefined ? 1 : startLen,
            content = _cursorMgr.getSelection.call(this);
        for (var i = 0; i < options.matches.length; i++) {
            var item = options.matches[i];
            var start = item.start;
            var reg = new RegExp(start + "[^" + start + "\\s]{" + len + ",20}$", "gi");
            var matches = content.match(reg);
            if (matches != null) {
                return {
                    content: content,
                    key: matches[0],
                    start: item.start,
                    end: item.end
                }
            }
        }
    },
    always: function (options, e) {
        for (var i = 0; i < options.matches.length; i++) {
            var item = options.matches[i];
            if (item.isMatch(e)) {
                return {
                    start: item.start,
                    end: item.end,
                    key: item.start,
                    content: _cursorMgr.getSelection.call(this, options)
                }
                //_matcher.always.call(this, options, { start: item.start, end: item.end });
                //matchInfo.content = cursorMgr.getSelection.call(this, options);        
                //_matcher._fire.call(this, options, matchInfo);
                break;
            }
        }
    }
    /*_fire: function (options, matchInfo) {
        layout.render.call(this, options, matchInfo);
        fire.match.call(this, options, matchInfo);
    }*/

}
/// <reference path="_layout.js" />
/// <reference path="_pubMethod.js"/>
var event_name_noop = "noop",
    event_name_miss = "miss",
    event_name_focus = "focus",
    event_name_default = "default",
    event_name_match = "match";


var _eventKey = {
    match: {
        create: function (matchInfo) {
            return {
                //e: "match",
                matchInfo: matchInfo,
                invoke: function (options, matchInfo) { //defnined matcher.byCursor,                                    
                    _layout.render.call(this, options, matchInfo);
                    var self = this;
                    var tagele = document.getElementById(options.atId);
                    var offset = _extendLib.offset(tagele);
                    offset.top += _extendLib.height(tagele) - this.scrollTop;
                    matchInfo.offset = offset;
                    matchInfo.set = function (newText) {
                        _pubMethod.set.call(self, options, newText)
                    }
                    matchInfo.focus = function () {
                        _pubMethod.focus(self, options)
                    },
                    matchInfo.hide = function () {
                        _pubMethod.hide(self, options)
                    }
                    options._state = 1;
                    options.onMatch.call(this, matchInfo);
                },
                bubby: false
            }
        }

    },
    miss: {

        create: function () {
            return {
                //e: "miss",
                invoke: function (options) {
                    options.onMiss.call(this)
                    options._state = 0;
                },
                bubby: true
            }
        }
    },
    focus: {

        create: function () {
            return {
                //e: "focus",
                invoke: function (options) {
                    if (typeof options.onFocus == "function") {
                        options.onFocus.call(this);
                        options._state = 0;
                    }
                },
                bubby: false
            }
        }
    },
    "default": {
        create: function () {
            return {
                //e: "default",
                invoke: function (options) {
                    var d = options.onDefault.call(this, options);
                    if (d) {
                        _pubMethod.set.call(this, options, d);
                    }
                },
                bubby: false
            }
        }
    },
    "noop": {
        create: function () {
            return {
                //e: "noop",
                invoke: function () { },
                bubby: true,
            }
        }
    }
};


var _layout = {
    reset: function (options) {
        var self = this, offset = _extendLib.offset(self);
        _extendLib.setSizePos(options._target, {
            width: self.clientWidth,
            height: self.clientHeight,
            left: offset.left,
            top: offset.top
        })
    },    
    /**
     * @param  {any} options
     * @param  {any} matchContent, this value from matcher.checkRange struct is {content:<without key>, key:<key>}
     */
    render: function (options, matchInfo) {

        var content = matchInfo.content.substr(0, matchInfo.content.length - matchInfo.key.length); //内容，不包括
        //console.debug("callRender:+ reformat:" + content);
        //console.debug(JSON.stringify(matchInfo));
        var htmlcontent = content.replace(/[\r\n]/g, "<br>").replace(/ /g, "&nbsp;");

        if (!options.atId) {
            options.atId = "at" + Math.round(Math.random() * 201) + (new Date()).getTime();
        }

        options.matchInfo = matchInfo;
        options.matchInfo.scrollTop = this.scrollTop;
        /*(content: matchInfo.content,//实际长度，并不包含&space之后的信息
        key: matchInfo.key,
        scrollTop: this.scrollTop
    };//保存实际长度*/

        options._target.innerHTML = htmlcontent + "<span id='" + options.atId + "'>" + matchInfo.key + "</span>";
    }
}

})(jQuery)